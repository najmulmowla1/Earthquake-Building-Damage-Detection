# -*- coding: utf-8 -*-
"""Custom CNN + Full Model Definition.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KVg3OaJwVtImGB_MMr4YXG1OlumyhTGL
"""

def build_custom_cnn(input_shape):
    inputs = tf.keras.Input(shape=input_shape)
    x = layers.Conv2D(32, (3, 3), activation='relu', padding='same')(inputs)
    x = layers.BatchNormalization()(x)
    x = layers.MaxPooling2D((2, 2))(x)

    x = layers.Conv2D(56, (3, 3), activation='relu', padding='same')(x)
    x = layers.BatchNormalization()(x)
    x = layers.MaxPooling2D((2, 2))(x)

    x = layers.Conv2D(64, (3, 3), activation='relu', padding='same')(x)
    x = layers.BatchNormalization()(x)
    x = layers.MaxPooling2D((2, 2))(x)

    x = layers.Conv2D(128, (3, 3), activation='relu', padding='same')(x)
    x = layers.BatchNormalization()(x)
    x = layers.Dropout(0.01)(x)
    x = layers.GlobalAveragePooling2D()(x)

    return tf.keras.Model(inputs=inputs, outputs=x, name="custom_cnn")

def build_model(input_shape, num_classes, patch_size):
    base_model = build_custom_cnn(input_shape)
    vit_block = VisionTransformer(
        patch_size=patch_size,
        num_patches=(input_shape[0] // patch_size) * (input_shape[1] // patch_size),
        embed_dim=64, num_heads=4, num_layers=4
    )(base_model.input)

    x = layers.Concatenate()([base_model.output, vit_block])
    x = layers.Dense(128, activation="relu")(x)
    x = layers.Dropout(0.01)(x)
    x = layers.Dense(64, activation="relu")(x)
    x = layers.Dropout(0.01)(x)
    x = layers.Dense(56, activation="relu")(x)
    output = layers.Dense(num_classes, activation="softmax")(x)

    return Model(inputs=base_model.input, outputs=output)